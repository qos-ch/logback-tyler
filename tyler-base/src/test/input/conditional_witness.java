package com.example;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.spi.Configurator;
import ch.qos.logback.classic.tyler.TylerConfiguratorBase;
import ch.qos.logback.core.Appender;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * <p>This file was generated by logback-tyler version 0.7-SNAPSHOT</p>
 *
 * <p>Eventual errors and warning are appended at the end.</p>
 *
 * <p>You can try, TylerConfigurator generation, that is the logback.xml
 * to Java translation at
 *
 *       https://logback.qos.ch/translator/services/xml2Java.html </p>
 *
 * <p>BEWARE: As of March 2024, TylerConfigurator generation from logback.xml
 * configuration files is still experimental and incomplete.
 * </p>
 *
 * <p>This class, i.e. TylerConfigurator, is intended to be copied and integrated
 * into the user's project as a custom configurator. It will configure logback
 * without XML.</p>
 *
 * <p>It requires logback-classic version 1.5.2 or later at runtime.</p>
 *
 * <p>Custom configurators are looked up via Java's service-provide facility. If a
 * custom provider is found, it takes precedence over logback's own configurators,
 * e.g. DefaultJoranConfigurator.</p>
 *
 * <p>See also item 1 of 'Configuration at initialization' section at
 *
 *     https://logback.qos.ch/manual/configuration.html#auto_configuration
 *
 * </p>
 */
public class TylerConfigurator extends TylerConfiguratorBase implements Configurator {
    /**
     * A map used to reference appenders during configuration.
     */
    protected final Map<String, Appender> tylerAppenderBag = new HashMap<>();

    /**
     * <p>This method performs configuration per {@link Configurator} interface.</p>
     *
     * <p>If <code>TylerConfgiurator</code> is installed as a configurator service, this
     * method will be called by logback-classic during initialization.</p>
     */
    @Override
    public Configurator.ExecutionStatus configure(LoggerContext loggerContext) {
        setContext(loggerContext);
        if(isDefined("j")) {
            Logger logger_com_foo_Bar = setupLogger("com.foo.Bar", "INFO", null);
        } else {
            Logger logger_com_foo_Bar = setupLogger("com.foo.Bar", "DEBUG", null);
        }
        Logger logger_ROOT = setupLogger("ROOT", "DEBUG", null);
        return ExecutionStatus.DO_NOT_INVOKE_NEXT_IF_ANY;
    }
}
// 21:16:49,117 |-INFO in ch.qos.logback.core.model.processor.DefaultProcessor@69ee81fc - End of configuration.