package com.example;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.PatternLayout;
import ch.qos.logback.classic.spi.Configurator;
import ch.qos.logback.classic.tyler.TylerConfiguratorBase;
import ch.qos.logback.core.spi.BasicSequenceNumberGenerator;
import ch.qos.logback.core.spi.LifeCycle;
import ch.qos.logback.core.testUtil.StringListAppender;

/**
 *
 * <p>This file was generated by logback-tyler version 1.0.3-SNAPSHOT</p>
 *
 * <p>Eventual errors and warnings are appended at the end.</p>
 *
 * <p>You may experiment with logback.xml to Java translation, i.e.
 * TylerConfigurator generation, at the following URL:</p>
 *
 * <p>     https://logback.qos.ch/translator/services/xml2Java.html </p>
 *
 * <p>This generated TylerConfigurator class is intended to be copied and integrated
 * into the user's project as a custom configurator. It will configure logback
 * without XML. You are free to rename TylerConfigurator as you wish.</p>
 *
 * <p>It requires logback-classic version 1.5.11 or later at runtime.</p>
 *
 * <p>Custom configurators are looked up via Java's service-provide facility. If a
 * custom provider is found, it takes precedence over logback's own configurators,
 * e.g. DefaultJoranConfigurator.</p>
 *
 * <p>To install your custom configurator to your project, add a
 * provider-configuration file to the following path:</p>
 *
 * <pre>  META-INF/services/ch.qos.logback.classic.spi.Configurator</pre>
 *
 * <p>This provider-configuration file should contain a line with the fully
 * qualified class name of your tyler configurator.</p>
 *
 * <p>See also item 1 of 'Configuration at initialization' section at </p>
 *
 * <p>  https://logback.qos.ch/manual/configuration.html#auto_configuration</p>
 *
 * <p>With recent versions of logback and logback-tyler you can still
 * configure logger levels dynamically using properties files. Note that
 * configuration files in properties format can be watched for
 * changes. See the documentation on PropertiesConfigurator for more details.</p>
 *
 * <p>https://logback.qos.ch/manual/configuration.html#propertiesConfigurator</p>
 *
 * <p>Keep in mind that by integrating a .properties configuration file info
 * your tyler configurator, you can still change logger levels dynamically, without
 * redeploying your application.</p>
 *
 */
public class TylerConfigurator extends TylerConfiguratorBase implements Configurator {
    /**
     * Appender variable referencing the appender named "LIST".
     */
    protected StringListAppender appenderLIST;

    /**
     * <p>This method performs configuration per {@link Configurator} interface.</p>
     *
     * <p>If <code>TylerConfigurator</code> is installed as a configurator service, this
     * method will be called by logback-classic during initialization.</p>
     */
    @Override
    public Configurator.ExecutionStatus configure(LoggerContext loggerContext) {
        setContext(loggerContext);
        setupBasicSequenceNumberGenerator();
        this.appenderLIST = setupAppenderLIST();
        Logger logger_ROOT = setupLogger("ROOT", "DEBUG", null);
        logger_ROOT.addAppender(appenderLIST);
        return ExecutionStatus.DO_NOT_INVOKE_NEXT_IF_ANY;
    }

    void setupBasicSequenceNumberGenerator() {
        BasicSequenceNumberGenerator basicSequenceNumberGenerator = new BasicSequenceNumberGenerator();
        basicSequenceNumberGenerator.setContext(context);

        if(basicSequenceNumberGenerator instanceof LifeCycle) {
            ((LifeCycle)basicSequenceNumberGenerator).start();
        }
    }

    StringListAppender setupAppenderLIST() {
        StringListAppender appender = new StringListAppender();
        appender.setContext(context);
        appender.setName("LIST");

        // Configure component of type PatternLayout
        PatternLayout patternLayout = new PatternLayout();
        patternLayout.setContext(context);
        patternLayout.setPattern("%msg");
        // ===========no parent setter
        patternLayout.start();
        // Inject component of type PatternLayout into parent
        appender.setLayout(patternLayout);

        appender.start();
        return appender;
    }
}
// 22:35:58,283 |-INFO in ch.qos.logback.tyler.base.handler.SequenceNumberGeneratorModelHandler - About to configure SequenceNumberGenerator of type [ch.qos.logback.core.spi.BasicSequenceNumberGenerator]
// 22:35:58,308 |-INFO in ch.qos.logback.core.model.processor.DefaultProcessor@6692b6c6 - End of configuration.
