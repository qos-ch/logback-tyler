package com.example;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
import ch.qos.logback.classic.spi.Configurator;
import ch.qos.logback.classic.tyler.TylerConfiguratorBase;
import ch.qos.logback.core.ConsoleAppender;
import ch.qos.logback.core.model.InsertFromJNDIModel;
import ch.qos.logback.core.model.processor.InsertFromJNDIModelHandler;

/**
 *
 * <p>This file was generated by logback-tyler version 0.9-SNAPSHOT</p>
 *
 * <p>Eventual errors and warnings are appended at the end.</p>
 *
 * <p>You may experiment with logback.xml to Java translation, i.e.
 * TylerConfigurator generation, at the following URL:
 *
 *       https://logback.qos.ch/translator/services/xml2Java.html </p>
 *
 * <p>This generated TylerConfigurator class is intended to be copied and integrated
 * into the user's project as a custom configurator. It will configure logback
 * without XML.</p>
 *
 * <p>It requires logback-classic version 1.5.11 or later at runtime.</p>
 *
 * <p>Custom configurators are looked up via Java's service-provide facility. If a
 * custom provider is found, it takes precedence over logback's own configurators,
 * e.g. DefaultJoranConfigurator.</p>
 *
 * <p>To install your custom configurator to your project, add a
 * provider-configuration file to the following path:</p>
 *
 * <pre>  META-INF/services/ch.qos.logback.classic.spi.Configurator</pre>
 *
 * <p>The provider-configuration  should contain a line with the fully
 * qualified class name of your desired configurator.</p>
 *
 * <p>See also item 1 of 'Configuration at initialization' section at </p>
 *
 * <p>  https://logback.qos.ch/manual/configuration.html#auto_configuration</p>
 *
 */
public class TylerConfigurator extends TylerConfiguratorBase implements Configurator {
    /**
     * Appender variable referencing the appender named "CONSOLE".
     */
    protected ConsoleAppender appenderCONSOLE;
    /**
     * <p>This method performs configuration per {@link Configurator} interface.</p>
     *
     * <p>If <code>TylerConfigurator</code> is installed as a configurator service, this
     * method will be called by logback-classic during initialization.</p>
     */
    @Override
    public Configurator.ExecutionStatus configure(LoggerContext loggerContext) {
        setContext(loggerContext);
        insertFromJNDIAs_appName("appName", "java:comp/env/appName", null);
        setContextName(subst("${appName}"));
        this.appenderCONSOLE = setupAppenderCONSOLE();
        Logger logger_ROOT = setupLogger("ROOT", "DEBUG", null);
        logger_ROOT.addAppender(appenderCONSOLE);
        return ExecutionStatus.DO_NOT_INVOKE_NEXT_IF_ANY;
    }

    ConsoleAppender setupAppenderCONSOLE() {
        ConsoleAppender appender = new ConsoleAppender();
        appender.setContext(context);
        appender.setName("CONSOLE");

        // Configure component of type PatternLayoutEncoder
        PatternLayoutEncoder patternLayoutEncoder = new PatternLayoutEncoder();
        patternLayoutEncoder.setContext(context);
        patternLayoutEncoder.setPattern(subst("%d ${CONTEXT_NAME} %level -%kvp- %msg %logger{50}%n"));
        patternLayoutEncoder.setParent(appender);
        patternLayoutEncoder.start();
        // Inject component of type PatternLayoutEncoder into parent
        appender.setEncoder(patternLayoutEncoder);

        appender.start();
        return appender;
    }

    private void insertFromJNDIAs_appName(String asStr, String envEntryStr, String scopeStr) {
        InsertFromJNDIModel insertFromJNDIModel = new InsertFromJNDIModel();
        insertFromJNDIModel.setAs(subst("asStr"));
        insertFromJNDIModel.setEnvEntryName(subst("envEntryStr"));
        insertFromJNDIModel.setScopeStr(subst("scopeStr"));
        InsertFromJNDIModelHandler insertFromJNDIModelHandler = new InsertFromJNDIModelHandler(context);
        insertFromJNDIModelHandler.detachedHandle(this, insertFromJNDIModel);
    }
}
// 11:53:00,947 |-INFO in ch.qos.logback.tyler.base.handler.ImplicitModelHandler - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
// 11:53:00,952 |-INFO in ch.qos.logback.core.model.processor.DefaultProcessor@30b6ffe0 - End of configuration.