package com.example;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.PatternLayout;
import ch.qos.logback.classic.spi.Configurator;
import ch.qos.logback.classic.tyler.TylerConfiguratorBase;
import ch.qos.logback.core.Appender;
import ch.qos.logback.core.model.IncludeModel;
import ch.qos.logback.core.model.Model;
import ch.qos.logback.core.model.processor.IncludeModelHandler;
import ch.qos.logback.core.model.processor.ModelHandlerException;
import ch.qos.logback.core.testUtil.StringListAppender;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * <p>This file was generated by logback-tyler version null</p>
 *
 * <p>Eventual errors and warnings are appended at the end.</p>
 *
 * <p>You may experiment with logback.xml to Java translation, i.e.
 * TylerConfigurator generation, at the following URL:</p>
 *
 * <p>     https://logback.qos.ch/translator/services/xml2Java.html </p>
 *
 * <p>This generated TylerConfigurator class is intended to be copied and integrated
 * into the user's project as a custom configurator. It will configure logback
 * without XML. You are free to rename TylerConfigurator as you wish.</p>
 *
 * <p>It requires logback-classic version 1.5.11 or later at runtime.</p>
 *
 * <p>Custom configurators are looked up via Java's service-provide facility. If a
 * custom provider is found, it takes precedence over logback's own configurators,
 * e.g. DefaultJoranConfigurator.</p>
 *
 * <p>To install your custom configurator to your project, add a
 * provider-configuration file to the following path:</p>
 *
 * <pre>  META-INF/services/ch.qos.logback.classic.spi.Configurator</pre>
 *
 * <p>This provider-configuration file should contain a line with the fully
 * qualified class name of your tyler configurator.</p>
 *
 * <p>See also item 1 of 'Configuration at initialization' section at </p>
 *
 * <p>  https://logback.qos.ch/manual/configuration.html#auto_configuration</p>
 *
 * <p>With recent versions of logback and logback-tyler you can still
 * configure logger levels dynamically using properties files. Note that
 * configuration files in properties format can be watched for
 * changes. See the documentation on PropertiesConfigurator for more details.</p>
 *
 * <p>https://logback.qos.ch/manual/configuration.html#propertiesConfigurator</p>
 *
 * <p>Keep in mind that by integrating a .properties configuration file info
 * your tyler configurator, you can still change logger levels dynamically, without
 * redeploying your application.</p>
 *
 */
public class TylerConfigurator extends TylerConfiguratorBase implements Configurator {
    /**
     * A map used to reference appenders during configuration.
     */
    protected final Map<String, Appender> tylerAppenderBag = new HashMap<>();

    /**
     * <p>This method performs configuration per {@link Configurator} interface.</p>
     *
     * <p>If <code>TylerConfigurator</code> is installed as a configurator service, this
     * method will be called by logback-classic during initialization.</p>
     */
    @Override
    public Configurator.ExecutionStatus configure(LoggerContext loggerContext) {
        setContext(loggerContext);
        Appender appenderLIST = setupAppenderLIST();
        propertyModelHandlerHelper.handlePropertyModel(this, "JO_PREFIX", "src/test/input/joran", "", "", "");
        include("${JO_PREFIX}/included.xml", null, null, null);
        Logger logger_ROOT = setupLogger("ROOT", "debug", null);
        logger_ROOT.addAppender(appenderLIST);
        return ExecutionStatus.DO_NOT_INVOKE_NEXT_IF_ANY;
    }

    Appender setupAppenderLIST() {
        StringListAppender appenderLIST = new StringListAppender();
        appenderLIST.setContext(context);
        appenderLIST.setName("LIST");
        this.tylerAppenderBag.put("LIST", appenderLIST);

        // Configure component of type PatternLayout
        PatternLayout patternLayout = new PatternLayout();
        patternLayout.setContext(context);
        patternLayout.setPattern("%msg");
        // ===========no parent setter
        patternLayout.start();
        // Inject component of type PatternLayout into parent
        appenderLIST.setLayout(patternLayout);

        appenderLIST.start();
        return appenderLIST;
    }

    private void include(String fileStr, String urlStr, String resourceStr, String optionalStr) {
        IncludeModel includeModel = new IncludeModel();
        includeModel.setFile(subst(fileStr));
        includeModel.setUrl(subst(urlStr));
        includeModel.setResource(subst(resourceStr));
        includeModel.setOptional(subst(optionalStr));
        IncludeModelHandler includeModelHandler = new IncludeModelHandler(context);
        try {
            Model modelFromIncludedFile = includeModelHandler.buildModelFromIncludedFile(this, includeModel);
            processModelFromIncludedFile(modelFromIncludedFile);
        } catch(ModelHandlerException e) {
            addError("Failed to process IncludeModelHandler", e);
        }
    }
}
// 22:11:33,947 |-INFO in ch.qos.logback.core.model.processor.DefaultProcessor@560348e6 - End of configuration.