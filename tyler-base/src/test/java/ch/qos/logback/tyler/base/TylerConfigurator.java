package ch.qos.logback.tyler.base;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
import ch.qos.logback.classic.filter.ThresholdFilter;
import ch.qos.logback.classic.spi.Configurator;
import ch.qos.logback.classic.tyler.TylerConfiguratorBase;
import ch.qos.logback.core.Appender;
import ch.qos.logback.core.joran.spi.NoAutoStartUtil;
import ch.qos.logback.core.rolling.RollingFileAppender;
import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;
import ch.qos.logback.core.rolling.TimeBasedRollingPolicy;
import ch.qos.logback.core.spi.ContextAware;
import ch.qos.logback.core.spi.LifeCycle;
import java.lang.Override;

/**
 *
 * <p>This file was generated by logback-tyler version 0.7-SNAPSHOT</p>
 *
 * <p>Eventual errors and warning are appended at the end.</p>
 *
 * <p>You can try, TylerConfigurator generation, that is the logback.xml
 * to Java translation at
 *
 *       https://logback.qos.ch/translator/services/xml2Java.html </p>
 *
 * <p>BEWARE: As of March 2024, TylerConfigurator generation from logback.xml
 * configuration files is still experimental and incomplete.
 * </p>
 *
 * <p>This class, i.e. TylerConfigurator, is intended to be copied and integrated
 * into the user's project as a custom configurator. It will configure logback
 * without XML.</p>
 *
 * <p>It requires logback-classic version 1.5.4 or later at runtime.</p>
 *
 * <p>Custom configurators are looked up via Java's service-provide facility. If a
 * custom provider is found, it takes precedence over logback's own configurators,
 * e.g. DefaultJoranConfigurator.</p>
 *
 * <p>See also item 1 of 'Configuration at initialization' section at
 *
 *     https://logback.qos.ch/manual/configuration.html#auto_configuration
 *
 * </p>
 */
class TylerConfigurator extends TylerConfiguratorBase implements Configurator {
    /**
     * <p>This method performs configuration per {@link Configurator} interface.</p>
     *
     * <p>If <code>TylerConfgiurator</code> is installed as a configurator service, this
     * method will be called by logback-classic during initialization.</p>
     */
    @Override
    public Configurator.ExecutionStatus configure(LoggerContext loggerCoontext) {
        setContext(loggerCoontext);
        propertyModelHandlerHelper.handlePropertyModel(this, "LOG_HOME", "log", "", "", "");
        Appender appenderFILE = setupAppenderFILE();
        Logger logger_ROOT = setupLogger("ROOT", "ERROR", null);
        logger_ROOT.addAppender(appenderFILE);
        return ExecutionStatus.DO_NOT_INVOKE_NEXT_IF_ANY;
    }

    Appender setupAppenderFILE() {
        RollingFileAppender appenderFILE = new RollingFileAppender();
        appenderFILE.setContext(context);
        appenderFILE.setName("FILE");

        // Configure component of type TimeBasedRollingPolicy
        TimeBasedRollingPolicy timeBasedRollingPolicy = new TimeBasedRollingPolicy();
        if (timeBasedRollingPolicy instanceof ContextAware) {
            timeBasedRollingPolicy.setContext(context);
        }
        timeBasedRollingPolicy.setFileNamePattern(subst("${LOG_HOME}/connectivi.log.%d{yyyy-MM-dd}.log"));
        timeBasedRollingPolicy.setMaxHistory(6);
        timeBasedRollingPolicy.setParent(appenderFILE);
        // start the complex property if it implements LifeCycle and is not
        // marked with a @NoAutoStart annotation
        if(NoAutoStartUtil.shouldBeStarted(timeBasedRollingPolicy)) {
            ((LifeCycle) timeBasedRollingPolicy).start();
        }
        // Inject component of type TimeBasedRollingPolicy into parent
        appenderFILE.setRollingPolicy(timeBasedRollingPolicy);

        // Configure component of type PatternLayoutEncoder
        PatternLayoutEncoder patternLayoutEncoder = new PatternLayoutEncoder();
        if (patternLayoutEncoder instanceof ContextAware) {
            patternLayoutEncoder.setContext(context);
        }
        patternLayoutEncoder.setPattern("%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n");
        patternLayoutEncoder.setImmediateFlush(true);
        patternLayoutEncoder.setParent(appenderFILE);
        // start the complex property if it implements LifeCycle and is not
        // marked with a @NoAutoStart annotation
        if(NoAutoStartUtil.shouldBeStarted(patternLayoutEncoder)) {
            ((LifeCycle) patternLayoutEncoder).start();
        }
        // Inject component of type PatternLayoutEncoder into parent
        appenderFILE.setEncoder(patternLayoutEncoder);

        // Configure component of type SizeBasedTriggeringPolicy
        SizeBasedTriggeringPolicy sizeBasedTriggeringPolicy = new SizeBasedTriggeringPolicy();
        if (sizeBasedTriggeringPolicy instanceof ContextAware) {
            sizeBasedTriggeringPolicy.setContext(context);
        }
        sizeBasedTriggeringPolicy.setMaxFileSize(ch.qos.logback.core.util.FileSize.valueOf("10MB"));
        // ===========no parent setter
        // start the complex property if it implements LifeCycle and is not
        // marked with a @NoAutoStart annotation
        if(NoAutoStartUtil.shouldBeStarted(sizeBasedTriggeringPolicy)) {
            ((LifeCycle) sizeBasedTriggeringPolicy).start();
        }
        // Inject component of type SizeBasedTriggeringPolicy into parent
        appenderFILE.setTriggeringPolicy(sizeBasedTriggeringPolicy);

        // Configure component of type ThresholdFilter
        ThresholdFilter thresholdFilter = new ThresholdFilter();
        if (thresholdFilter instanceof ContextAware) {
            thresholdFilter.setContext(context);
        }
        thresholdFilter.setLevel("TRACE");
        // ===========no parent setter
        // start the complex property if it implements LifeCycle and is not
        // marked with a @NoAutoStart annotation
        if(NoAutoStartUtil.shouldBeStarted(thresholdFilter)) {
            ((LifeCycle) thresholdFilter).start();
        }
        // Inject component of type ThresholdFilter into parent
        appenderFILE.addFilter(thresholdFilter);

        appenderFILE.start();
        return appenderFILE;
    }
}
// 12:22:31,151 |-INFO in ch.qos.logback.core.model.processor.DefaultProcessor@5f77d0f9 - End of configuration.